#!/usr/bin/env ruby

###
# NOTE: I have been running this script straight from textmate, so a few paths are hard-coded here
##


###
# Methods to load files into lookup tables
##

DELIM = "\t" # some of our data uses commas

# My ISO data files all have the same format: "code\tname\tnotes"
def load_iso_csv(filename)
  table = {}
  File.open(filename).each_line do |line|
    code, name = line.strip.split(DELIM)
    table[name.to_sym] = code.to_sym
  end
  table
end

# The UN gives us a few regions that ISO does not
def load_un_csv(filename, iso_numeric)
  table = {}
  File.open(filename).each_line do |line|
    code, name = line.strip.split(DELIM)
    code = code.to_sym
    name = name.to_sym
    unless iso_numeric.has_value?(code) # only load the extras
      table[name] = code
    end
  end
  table
end

# Parent-child lookups are stored in the file heirarchy.
# This is pretty hackish, but it works.
def load_parents
  parent = {}
  `find ../data/un -name '???'`.split("\n").each do |line|
    line = line[/001.*/].split('/').collect{|s|s.to_sym}
    until line.size <= 1
      parent[line.pop] = line.last
    end
  end
  parent
end

###
# Create a bunch of lookup tables
##
iso_numeric   = load_iso_csv('../data/iso/3166-1/numeric.csv')
iso_alpha2    = load_iso_csv('../data/iso/3166-1/alpha-2.csv')
iso_alpha3    = load_iso_csv('../data/iso/3166-1/alpha-3.csv')
un_numeric    = load_un_csv('../data/un/001/World.csv', iso_numeric)
un_parent     = load_parents

###
# Iterate through the data
##

names = (iso_numeric.keys + iso_alpha2.keys + iso_alpha3.keys + un_numeric.keys).uniq

# Open the output file and give it a header
data = File.open('../data/all.csv', 'w')
data.puts ["ISO 3166-1 Numeric", "ISO 3166-1 Alpha2", "ISO 3166-1 Alpha3", "Parent", "Name"].join(DELIM)

# Iterate through each country and create an output-ready array
countries = names.collect do |name|
  numeric = iso_numeric[name] || un_numeric[name]
  alpha2  = iso_alpha2[name]
  alpha3  = iso_alpha3[name]
  parent  = un_parent[numeric]
  [ numeric, alpha2, alpha3, parent, name ]
end.sort { |a,b| a[0].to_s <=> b[0].to_s }

# Format and write the data
countries.each do |country|
  output = country.join(DELIM)
  puts output
  data.puts output
end
